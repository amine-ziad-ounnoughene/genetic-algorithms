# -*- coding: utf-8 -*-
"""Genetic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1btKLmsrW2Ex34JQl2ld6THFLBfZdCpX-
"""

import numpy as np
def generate(pop_size=6,individual_len=5):
  population = np.random.choice([0, 1], size=pop_size*individual_len)
  return population.reshape([pop_size,individual_len])

def fitness(population):
    scores = []
    for pop in population:
      score,i = 0,0
      while i < len(pop):
        score += pop[i]
        i += 1
      scores.append(score)
    return np.array(scores)



def Tournament_selection(pop,prnt=3,indiv_selec=2):
    scores = fitness(pop)
    index = []
    # create random parent indexes
    random = np.random.randint(len(pop[0]),size=(prnt,indiv_selec))
    for i in range(random.shape[0]):
      # select the best element in the i th tournament and return its index
      inx = np.argmax([scores[random[i][j]] for j in range(len(list(random[i])))])
      index.append(random[i][inx])
    return index
Tournament_selection(generate())

# this means that the elements with these indexes should pass the crossover

from itertools import permutations
def crossover(pop,offsprings=3):
    mates = list(permutations(Tournament_selection(pop),2))[:offsprings]
    population = []
    for i in mates:
      offspring1 = [pop[i[0]][:2][0] , pop[i[0]][:2][1], pop[i[1]][2:3][0],pop[i[0]][3:][0],pop[i[0]][3:][1]]
      offspring2 = [pop[i[1]][:2][0] , pop[i[1]][:2][1], pop[i[0]][2:3][0],pop[i[1]][3:][0],pop[i[1]][3:][1]]
      population.append(offspring1)
      population.append(offspring2)
    return np.array(population)
crossover(generate())

from itertools import permutations
def mutation(pop,mutation_num=1):
  pop = crossover(pop)
  index = np.random.randint(4,size=2)
  if pop[index[0]][index[1]] == 0:
    pop[index[0]][index[1]] = 1
  else:
    pop[index[0]][index[1]] = 0
  return pop
crossover(generate())

pop = generate()
i = 0
while max(fitness(pop)) != 5:
  pop = mutation(pop)
  print(f"generation {i} : {max(fitness(pop))}")
  i += 1